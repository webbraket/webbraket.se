.page-header
  h2 Document Object Model

p Document Object Model(DOM) är ett API för HTML och XML dokument. Den definierar den logiska strukturen och hur man kommer åt ett dokument och manipulerar det. 


h3 Javascript och DOM 
p Med denna modell kan vi nu med hjälp av Javascript kunna modifiera trädet och skapa dynamiska hemsidor. Det handlar alltså om att vi kan ta bort, komma åt, modifiera och lägga till element.

h3 Document
p Document är ett objekt som "Äger" alla andra objekt, med det menas att utifall du vill komma åt andra objekt i DOM:en görs detta genom <code> document.method()</code>. 

table.table.table-condensed
    tr
        th Metod
        th Förklaring
    tr
        td(colspan="3").table-divider Hitta element
    tr
        td <code>document.getElementById()</code>
        td Hämtar ett element med hjälp av dess ID 
    tr
    tr
        td <code>document.getElementsByTagName()</code>
        td Hämtar alla element med hjälp av dess tagnamn 
    tr
    tr
        td <code>document.getElementsByClassName()</code>
        td Hämtar ett element med hjälp av dess klassnamn


h3 Element
p När vi hämtar ett element ur DOM:en genom någon av de metoder som diskuterades ovan, så kan vi sedan läsa och skriva information till det elementet. Ett element är alltså bara ännu ett objekt med ett antal egenskaper och metoder. Med andra ord kan vi inte bara läsa ifrån DOM:en, utan vi kan även förändra den. Nedan ser du några exempel på vad vi kan göra med ett element

table.table.table-condensed
    tr
        td(colspan="3").table-divider Antag att vi har ett element i variabeln elem
    tr
        td <code>elem.innerHTML</code>
        td Ändrar den inre HTML:en av ett element
    tr
        td <code>elem.attribute</code>
        td Ändrar ett elements attribut.
    tr
        td <code> elem.style</code>
        td Ett objekt som vi kan läsa/skriva css från/till


h3 Exempel
p Låt oss se till ett par exempel på hur vi kan manipulera DOM:en.
.panel.panel-default
    .panel-heading Exempel på att gömma ett element.
    .panel-body
        .panel.panel-default
            .panel-heading HTML
            .panel-body
                pre
                    code.language-markup
                        | &lt;p id="secret"&gt; LYSSNA PÅ MIG! &lt;/p&gt; 
        .panel.panel-default
            .panel-heading JavaScript
            .panel-body
                pre
                    code.language-javascript
                        | var p = document.getElementById("secret");
                        | p.style.display = "none";
p Vad vi gör ovan är alltså helt enkelt att vi först hämtar elementet med hjälp av dess ID. Sedan hämtar vi <code>style</code>-objektet på elementet. På <code>style</code>-elementet sätter vi egenskapen <code>display</code> till värdet <code>none</code>. JavaScriptkoden skulle kunna komprimeras till att skrivas på en enda rad, vet du hur?
.panel.panel-default
    .panel-heading Exempel på att hämta med tagnamn.
    .panel-body
        .panel.panel-default
            .panel-heading HTML
            .panel-body
                pre
                    code.language-markup
                        | &lt;p&gt; A &lt;/p&gt;
                        | &lt;p&gt; B &lt;/p&gt;
                        | &lt;p&gt; C &lt;/p&gt;
                        | &lt;p&gt; D &lt;/p&gt;
        .panel.panel-default
            .panel-heading JavaScript
            .panel-body
                pre
                    code.language-javascript
                        |  var as = menu.getElementsByTagName('p');  
                        |  as[0].innerHTML = "Ett";
                        |  as[1].innerHTML = "Två";
                        |  as[3].innerHTML = as[1].innerHTML;
        .panel.panel-default
            .panel-heading Resultat
            .panel-body
                p Ett
                p Två
                p C
                p Två

p Ok, nu kanske det krävs en liten förklaring. Om vi som i första exemplet hämtar med id då vet vi att vi endast får ett objekt tillbaka. I andra exemplet ovan ber vi om objekten med hjälp av tagnamnet och därför returneras dessa i en array. Med andra ord: när vi hämtar ett element genom ett ID kan vi alltid vara hundra på att det bara finns ett (eftersom ett ID endast får förekomma en gång i ett HTML-dokument). Men när vi söker element via tagnamn så kan vi omöjligen veta hur många instanser det finns av just den taggen. Således har man valt att låta <code>getElementsByTagName</code> returnera en array. Således är det även därför vi ovan använder bracket-notationen (<code>[x]</code>) för att arbeta med resultatet.

blockquote.text-warning Se till att du förstår varför outputen i exemplet ovan blir som den blir innan du går vidare



h3 onload
p När vi skriver JavaScript som på något sätt interagerar med DOM:en, är det viktigt att vi är säkra på att DOM:en är redo (inladdad) innan vi börjar försöka nå den. Detta gör vi enkelt genom att använda oss av metoden <code>onload</code>.

.panel.panel-default
    .panel-heading Exempel på hur vi använder onload.
    .panel-body
        pre
            code.language-javascript
                | window.onload = function(){
                |   // do all fancy work here
                | }

p Varför gör vi alltså detta? Jo, om vi inte skulle göra det så finns alltså risken för att de element vi försöker komma åt inom funktionskroppen i ovan exempel ännu inte finns.

p Ovan kan förstås lika gärna göras i två steg, genom att registrera en redan deklarerad funktion.

.panel.panel-default
    .panel-heading Exempel på hur vi använder onload.
    .panel-body
        pre
            code.language-javascript
                | // Declare the init function
                | var init = function(){
                | }
                | 
                | // Register it as a listener to the onload event
                | window.onload = init;

p Vad vi har gjort nu kallas mer generellt för att registrera en funktion (en <code>event handler</code>) till ett <code>event</code>. Mer om detta i avsnittet om events.
